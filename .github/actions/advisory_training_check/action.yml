name: 'Vulnerability Training Check'
description: 'Blocks push if employee is not trained on specific vulnerability'
inputs:
  target_repo:
    description: 'Repository to check advisories in (format: owner/repo)'
    required: true
    default: ${{ github.repository }}
  sec_token:
    description: 'GitHub PAT with security advisory read access'
    required: true
  api_endpoint:
    description: 'SecureFlag API endpoint'
    required: true
  api_token:
    description: 'SecureFlag API token'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 1) Extract GHSA ID and committer email
    - name: Find security reference
      id: extract
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.sec_token }}
      run: |
        RESPONSE=$(curl -sSL \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}")
        COMMITTER_EMAIL=$(echo "$RESPONSE" | jq -r '.commit.author.email')
        echo $COMMITTER_EMAIL

        PR_JSON=$(curl -sSL \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.sec_token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ inputs.target_repo }}/commits/${{ github.sha }}/pulls)

        PR_TITLE=$(echo "$PR_JSON" | jq -r '.[0].title')
        PR_BODY=$(echo "$PR_JSON" | jq -r '.[0].body')
        PR_No=$(echo "$PR_JSON" | jq -r '.[0].number')

        COMMITS_JSON=$(gh pr view $PR_No --json commits)
        COMMIT_MESSAGES=$(echo $COMMITS_JSON | jq -r '.commits[].messageHeadline')

        echo -e "$PR_TITLE\n$PR_BODY\n$COMMIT_MESSAGES\n$COMMITTER_EMAIL" #DEBUG

        if [[ "$COMMITTER_EMAIL" == *users.noreply.github.com ]]
        then
          echo "The email address is private, skipping"
          GHSA_IDS=""
        else
          GHSA_IDS=$(echo "$COMMIT_MESSAGES $PR_TITLE $PR_BODY" |
            grep -oE 'GHSA-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}' |
            sort -u |
            tr '\n' ' ' |
            xargs echo -n || echo "")
        fi

        echo "pr_no=$PR_No" >> $GITHUB_OUTPUT
        echo "ghsa_ids=$GHSA_IDS" >> $GITHUB_OUTPUT
        echo "committer_email=$COMMITTER_EMAIL" >> $GITHUB_OUTPUT
        echo "Extracted GHSA IDs: $GHSA_IDS"

    # 2) Check target repo's advisories
    - name: Verify advisory
      id: check_sec_adv
      if: steps.extract.outputs.ghsa_ids != ''
      shell: bash
      env:
        GHSA_IDS: ${{ steps.extract.outputs.ghsa_ids }}
      run: |
        # Convert space-separated IDs to array
        IFS=' ' read -ra GHSA_ARRAY <<< "$GHSA_IDS"

        ADVISORY_SUMMARIES=""
        for GHSA_ID in "${GHSA_ARRAY[@]}"; do
          echo "Checking advisory: $GHSA_ID"

          RESPONSE=$(curl -s \
            -H "Authorization: Bearer ${{ inputs.sec_token }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ inputs.target_repo }}/security-advisories/$GHSA_ID")

          SUMMARY=$(echo "$RESPONSE" | jq -r '.summary // empty')

          if [ -n "$SUMMARY" ]; then
            echo "Found advisory: $SUMMARY ($GHSA_ID)"
            ADVISORY_MAP+="$GHSA_ID|$SUMMARY"$'\n'
          else
            echo "::warning::Advisory $GHSA_ID not found"
          fi
        done
        ADVISORY_MAP="${ADVISORY_MAP%$'\n'}"
        echo "advisory_map<<EOF" >> $GITHUB_OUTPUT
        echo "$ADVISORY_MAP" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    # 3) Call SecureFlag API
    - name: Verify training
      id: verify_training
      if: steps.check_sec_adv.outputs.advisory_map != ''
      shell: bash
      env:
        ADVISORY_MAP: ${{ steps.check_sec_adv.outputs.advisory_map }}
        COMMITTER_EMAIL: ${{ steps.extract.outputs.committer_email }}
      run: |
        VULNERABILITIES=""
        while IFS='|' read -r GHSA_ID SUMMARY; do
          echo "Verifying training for: $GHSA_ID ($SUMMARY)"

          response=$(curl -s \
            -H "Authorization: Bearer ${{ inputs.api_token }}" \
            -H "Content-Type: application/json" \
            -d "{\"issueTitle\":\"$SUMMARY\",\"user\":\"$COMMITTER_EMAIL\",\"days\":\"365\"}" \
            ${{ inputs.api_endpoint }})

          result=$(echo "$response" | jq -r '.result')
          error=$(echo "$response" | jq -r '.error')
          vulnerability=$(echo "$response" | jq -r '.vulnerability')

          if [ "$result" = true ] || [ "$error" = true ];then
            echo "Training verification succeeded: User $COMMITTER_EMAIL completed training on \"$vulnerability\" found in \"$GHSA_ID\", action is approved"
          else
            echo "FAILED: $response"
            echo "::error:: Training verification failed: User $COMMITTER_EMAIL has not completed required training on \"$vulnerability\" found in \"$GHSA_ID\", action is refused"
            VULNERABILITIES+="$vulnerability"$'\n'
          fi
        done <<< "$ADVISORY_MAP"

        echo "Vulnerabilities: $VULNERABILITIES" #DEBUG

        if [ -n "$VULNERABILITIES" ]; then
          echo "vulnerabilities<<EOF" >> $GITHUB_OUTPUT
          echo "${VULNERABILITIES%$'\n'}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          exit 1
        fi

    # 4) Comment on PR if training fails
    - name: Add comment via GH CLI
      if: failure() && steps.verify_training.conclusion == 'failure'
      shell: bash
      env:
        COMMITTER_EMAIL: ${{ steps.extract.outputs.committer_email }}
        VULNERABILITIES: ${{ steps.verify_training.outputs.vulnerabilities }}
        PR_NO: ${{ steps.extract.outputs.pr_no }}
        GH_TOKEN: ${{ inputs.sec_token }}
      run: |
        # Create a temporary file for the comment body
        TEMP_FILE=$(mktemp)
        
        # Start building the Markdown content
        {
          echo '### ‚ùå Merge Request Blocked'
          echo
          echo "**User**: ${COMMITTER_EMAIL}"
          echo
          echo "To proceed, complete at least one lab from the following security category(ies):"
          
          # Add each vulnerability as a list item with link
          while IFS= read -r vuln; do
            [ -z "$vuln" ] && continue
            encoded=$(echo "$vuln" | jq -Rr '@uri')
            echo "- [$vuln](https://www.secureflag.com/go.html?type=search&c=$encoded)"
          done <<< "$VULNERABILITIES"
        } > "$TEMP_FILE"
        
        # Post the comment using the file content
        gh issue comment "$PR_NO" --body-file "$TEMP_FILE"
        
        # Clean up
        rm "$TEMP_FILE"
